[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ardupilot_methodic_configurator"
authors = [
    {name = "Amilcar do Carmo Lucas", email = "amilcar.lucas@iav.de"},
]
maintainers = [
    {name = "Amilcar do Carmo Lucas", email = "amilcar.lucas@iav.de"},
]
description = "A clear configuration sequence for ArduPilot vehicles"
readme = {file = "README.md", content-type = "text/markdown"}
requires-python = ">=3.9"
keywords = ["ArduPilot", "Configuration", "SCM", "Methodic", "ArduCopter", "ArduPlane", "ArduRover", "ArduSub"]
license = {text = "GPLv3"}

classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: Manufacturing",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Natural Language :: English",
    "Natural Language :: Chinese (Simplified)",
    "Natural Language :: German",
    "Natural Language :: Portuguese",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Embedded Systems",
    "Topic :: System :: Installation/Setup",
    "Topic :: Scientific/Engineering",
]

dependencies = [
    "defusedxml",
    "matplotlib",
    "numpy",
    "platformdirs",
    "pymavlink",
    "pyserial",
    "pillow",
    "setuptools",
    "requests",
]

dynamic = ["version"]

[project.optional-dependencies]
dev = [
    "ruff",
    "pre-commit",
    "pytest",
    "pytest-cov",
    "coverage",
    "mock",
    "pyinstaller",
    "mypy",
    "pyright",
    "github",
]

[project.scripts]
ardupilot_methodic_configurator = "ardupilot_methodic_configurator.__main__:main"
extract_param_defaults = "ardupilot_methodic_configurator.extract_param_defaults:main"
annotate_params = "ardupilot_methodic_configurator.annotate_params:main"
param_pid_adjustment_update = "ardupilot_methodic_configurator.param_pid_adjustment_update:main"

[project.urls]
homepage = "https://github.com/ArduPilot/MethodicConfigurator"
documentation = "https://github.com/ArduPilot/MethodicConfigurator/blob/master/USERMANUAL.md"
issues = "https://github.com/ArduPilot/MethodicConfigurator/issues"
source = "https://github.com/ArduPilot/MethodicConfigurator"
forum = "https://discuss.ardupilot.org/t/new-ardupilot-methodic-configurator-gui/115038/"
chat = "https://discord.com/invite/ArduPilot"
download = "https://github.com/ArduPilot/MethodicConfigurator/releases"
changelog = "https://github.com/ArduPilot/MethodicConfigurator/releases"

[tool.setuptools]
packages = ["ardupilot_methodic_configurator"]
package-data = {ardupilot_methodic_configurator = ["*.param", "*.jpg", "*.json", "*.xml", "*.mo", "*.png"]}
exclude-package-data = {ardupilot_methodic_configurator = ["test.xml"]}
include-package-data = false

[tool.setuptools.dynamic]
version = {attr = "ardupilot_methodic_configurator.__version__"}

[tool.ruff]
exclude = [
    ".git",
    "__pycache__",
    "__target__",
    "dist",
]

# https://docs.astral.sh/ruff/rules/
lint.select = [
    "F",    # Pyflakes
    "E",    # pycodestyle -Error
    "W",    # pycodestyle - Warning
    #"C901", # maccabe
    "I",    # isort
    "N",    # pep8-naming
    "D",    # pydocstyle
    "UP",   # pyupgrade
    "YTT",  # flake8-2020
    "ANN",  # flake8-annotations
    "ASYNC",# flake8-async
    "S",    # flake8-bandit
    #"BLE",  # flake8-blind-except
    "FBT",  # flake8-boolean-trap
    "B",    # flake8-bugbear
    "A",    # flake8-builtins
    "COM",  # flake8-commas
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "T10",  # flake8-debugger
    "EM",   # flake8-errmsg
    "EXE",  # flake8-executable
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "LOG",  # flake8-logging
    "G",    # flake8-logging-format
    "INP",  # flake8-no-pep420
    "PIE",  # flake8-pie
    #"T20",  # flake8-print (T20)
    "PYI",  # flake8-pyi (PYI)
    #"PT",   # flake8-pytest-style (PT)
    "Q",    # flake8-quotes (Q)
    "RSE",  # flake8-raise (RSE)
    "RET",  # flake8-return (RET)
    "SLF",  # flake8-self (SLF)
    "SLOT", # flake8-slots (SLOT)
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "TC",   # flake8-type-checking
    "INT",  # flake8-gettext
    "ARG",  # flake8-unused-arguments
    #"PTH",  # flake8-use-pathlib
    #"TD",   # flake8-todos
    #"FIX",  # flake8-fixme
    #"ERA",  # eradicate
    "PD",   # pandas-vet
    "PGH",  # pygrep-hooks
    "PL",   # Pylint
    "FLY002", # flynt
    "PERF", # Performance-related issues
    "FURB", # refurb
    "DOC",  # pydoclint
    "RUF",  # Ruff-specific codes
]

lint.ignore = [
    "PLR0912",  # too many branches
    "PLR0913",  # too many arguments
    "PLR2004",  # Magic value used in comparison, consider replacing `X` with a constant variable
    "ISC001",  # to let formatter run
    "ANN002",
    "ANN003",
    "D102",    # Missing docstring in public method
    "D103",    # Missing docstring in public function
    "D107",    # Missing docstring in `__init__`
    "D203",    # 
    "D205",    # 1 blank line required between summary line and description
    "D212",    # Multi-line docstring summary should start at the first line
    "D404",    # First word of the docstring should not be "This"
    "D401",    # First line of docstring should be in imperative mood
    "COM812",
    "DTZ005",  # `tz=None` passed to `datetime.datetime.now()`
    "FBT001",  # Boolean-typed positional argument in function definition
    "FBT002",  # Boolean default positional argument in function definition
]

line-length = 127
indent-width = 4

[tool.ruff.lint.per-file-ignores]
"unittests/*" = ["D101","UP031", "ARG002", "ANN001"]
"ardupilot_methodic_configurator/backend_mavftp.py" = ["PGH004", "N801", "ANN001"]
"ardupilot_methodic_configurator/backend_mavftp_example.py" = ["ANN001"]
"ardupilot_methodic_configurator/tempcal_imu.py" = ["ANN001"]

[tool.mypy]
ignore_missing_imports = true
disallow_any_unimported = false
disallow_any_expr = false
disallow_any_decorated = false
disallow_any_generics = false
disallow_any_explicit = false
disallow_subclassing_any = false

# Disallow untyped definitions and calls
disallow_untyped_calls = false
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = true

# None and optional handling
no_implicit_optional = true

# Configuring warnings
warn_unused_ignores = true
warn_no_return = true
warn_return_any = true
warn_redundant_casts = true

# Misc things
strict_equality = true

# Config file
warn_unused_configs = true

files = ["ardupilot_methodic_configurator/*.py"]
exclude = ["unittests"]

[tool.pyright]
exclude = [".venv"]
pythonVersion = "3.9"
venvPath = "."
venv = ".venv"
