[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "MethodicConfigurator"
authors = [
    {name = "Amilcar do Carmo Lucas", email = "amilcar.lucas@iav.de"},
]
maintainers = [
    {name = "Amilcar do Carmo Lucas", email = "amilcar.lucas@iav.de"},
]
description = "A clear configuration sequence for ArduPilot vehicles"
readme = {file = "README.md", content-type = "text/markdown"}
requires-python = ">=3.9"
keywords = ["ArduPilot", "Configuration", "SCM", "Methodic", "ArduCopter", "ArduPlane", "ArduRover", "ArduSub"]
license = {text = "GPLv3"}

classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
]

dependencies = [
    "defusedxml",
    "matplotlib",
    "numpy",
    "platformdirs",
    "pymavlink",
    "pyserial",
    "pillow",
    "setuptools",
    "requests",
]

dynamic = ["version"]

[project.optional-dependencies]
dev = [
    "ruff",
    "pre-commit",
    "pytest",
    "pytest-cov",
    "coverage",
    "mock",
]

[project.scripts]
ardupilot_methodic_configurator = "MethodicConfigurator.ardupilot_methodic_configurator:main"
extract_param_defaults = "MethodicConfigurator.extract_param_defaults:main"
annotate_params = "MethodicConfigurator.annotate_params:main"
param_pid_adjustment_update = "MethodicConfigurator.param_pid_adjustment_update:main"

[project.urls]
homepage = "https://github.com/ArduPilot/MethodicConfigurator"
documentation = "https://github.com/ArduPilot/MethodicConfigurator/blob/master/USERMANUAL.md"
issues = "https://github.com/ArduPilot/MethodicConfigurator/issues"
source = "https://github.com/ArduPilot/MethodicConfigurator"
forum = "https://discuss.ardupilot.org/t/new-ardupilot-methodic-configurator-gui/115038/"
chat = "https://discord.com/invite/ArduPilot"
download = "https://github.com/ArduPilot/MethodicConfigurator/releases"
changelog = "https://github.com/ArduPilot/MethodicConfigurator/releases"

[tool.setuptools]
packages = ["MethodicConfigurator"]
package-data = {MethodicConfigurator = ["*.param", "*.jpg", "*.json", "*.xml", "*.mo", "*.png"]}
exclude-package-data = {MethodicConfigurator = ["test.xml"]}
include-package-data = false

[tool.setuptools.dynamic]
version = {attr = "MethodicConfigurator.__version__"}

[tool.ruff]
exclude = [
    ".git",
    "__pycache__",
    "__target__",
    "dist",
]

lint.select = [
    "F",    # pycodestyle
    "E",    # Pyflakes
    "W",    # Warnings
    "U",    # pyupgrade
    "I",    # isort
    "N",    # pep8-naming
    "PL",   # Pylint
    "B",    # flake8-bugbear
    "RUF",  # Ruff-specific codes
    "PERF", # Performance-related issues
    "SIM",  # flake8-simplify
    "LOG",  # flake8-logging
    "G",    # flake8-logging-format
    #"C901", # maccabe
    "S",    # flake8-bandit
    "TID",  # flake8-tidy-imports
    "TCH",  # flake8-type-checking
    "INT",  # flake8-gettext
    "FLY002", # flynt
    #"FURB", # refurb
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
]

lint.ignore = [
    "PLR0912",  # too many branches
    "PLR0913",  # too many arguments
    "PLR2004",  # Magic value used in comparison, consider replacing `X` with a constant variable
    "N801",    # Class name `FTP_OP` should use CapWords convention
    "N802",    # Function name `X` should be lowercase
    "N806",    # Variable name `X` should be lowercase
    "N812",    # Lowercase `x` imported as non-lowercase `X`
    "N814",    # Camelcase `X` imported as constant `Y`
    "N817",    # CamelCase `X` imported as acronym `Y`
    "N999",    # Invalid module name: 'MethodicConfigurator'
    "ISC001",  # to let formatter run
]

line-length = 127
indent-width = 4

target-version = "py39"

[tool.mypy]
ignore_missing_imports = true
disallow_any_unimported = false
disallow_any_expr = false
disallow_any_decorated = false
disallow_any_generics = false
disallow_any_explicit = false
disallow_subclassing_any = false

# Disallow untyped definitions and calls
disallow_untyped_calls = false
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = true

# None and optional handling
no_implicit_optional = true

# Configuring warnings
warn_unused_ignores = true
warn_no_return = false
warn_return_any = true
warn_redundant_casts = true

# Misc things
strict_equality = true

# Config file
warn_unused_configs = true

files = ["MethodicConfigurator/*.py"]
exclude = ["unittests"]