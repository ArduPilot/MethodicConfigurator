{
    // See https://go.microsoft.com/fwlink/?LinkId=733558
    // for the documentation about the tasks.json format
    "version": "2.0.0",
    "tasks": [
        {
            "label": "Ruff: Check",
            "type": "shell",
            "command": "${command:python.interpreterPath}",
            "args": ["-m", "ruff", "check", "."],
            "problemMatcher": {
                "owner": "ruff",
                "fileLocation": ["relative", "${workspaceFolder}"],
                "pattern": {
                    "regexp": "^(.+):(\\d+):(\\d+): ([A-Z]\\d{3}) (.+)$",
                    "file": 1,
                    "line": 2,
                    "column": 3,
                    "code": 4,
                    "message": 5
                }
            }
        },
        {
            "label": "Ruff: Fix",
            "type": "shell",
            "command": "${command:python.interpreterPath}",
            "args": ["-m", "ruff", "check", "--fix", "."],
            "problemMatcher": {
                "owner": "ruff",
                "fileLocation": ["relative", "${workspaceFolder}"],
                "pattern": {
                    "regexp": "^(.+):(\\d+):(\\d+): ([A-Z]\\d{3}) (.+)$",
                    "file": 1,
                    "line": 2,
                    "column": 3,
                    "code": 4,
                    "message": 5
                }
            }
        },
        {
            "label": "Ruff: Fix (unsafe)",
            "type": "shell",
            "command": "${command:python.interpreterPath}",
            "args": ["-m", "ruff", "check", "--fix", "--unsafe-fixes", "."],
            "problemMatcher": {
                "owner": "ruff",
                "fileLocation": ["relative", "${workspaceFolder}"],
                "pattern": {
                    "regexp": "^(.+):(\\d+):(\\d+): ([A-Z]\\d{3}) (.+)$",
                    "file": 1,
                    "line": 2,
                    "column": 3,
                    "code": 4,
                    "message": 5
                }
            }
        },
        {
            "label": "Ruff: Format",
            "type": "shell",
            "command": "${command:python.interpreterPath}",
            "args": ["-m", "ruff", "format"]
        },
        {
            "label": "Pylint",
            "type": "shell",
            "command": "sh",
            "args": [
                "-c",
                "${command:python.interpreterPath} -m pylint $(git ls-files '**/*.py')"
            ],
            "windows": {
                "command": "powershell",
                "args": [
                    "-NoProfile",
                    "-Command",
                    "& { $files = git ls-files \"**/*.py\"; if ($files) { & '${command:python.interpreterPath}' -m pylint $files } else { Write-Output 'No python files found'; exit 0 } }"
                ]
            },
            "problemMatcher": {
                "owner": "pylint",
                "fileLocation": ["relative", "${workspaceFolder}"],
                "pattern": [
                    {
                        "regexp": "^(.+):(\\d+):(\\d+): ([A-Z]\\d{4}): (.+) \\(([a-z-]+)\\)$",
                        "file": 1,
                        "line": 2,
                        "column": 3,
                        "severity": 4,
                        "message": 5,
                        "code": 6
                    }
                ]
            }
        },
        {
            "label": "Mypy",
            "type": "shell",
            "command": "${command:python.interpreterPath}",
            "args": ["-m", "mypy"],
            "problemMatcher": {
                "owner": "mypy",
                "fileLocation": ["relative", "${workspaceFolder}"],
                "pattern": {
                    "regexp": "^(.+):(\\d+): (error|note|warning): (.+)\\[([-\\w]+)\\]$",
                    "file": 1,
                    "line": 2,
                    "severity": 3,
                    "message": 4,
                    "code": 5
                }
            }
        },
        {
            "label": "Extract Missing Translations",
            "type": "shell",
            "command": "${command:python.interpreterPath}",
            "args": [
                "extract_missing_translations.py",
                "--lang-code",
                "${input:languageCode}",
                "--output-file",
                "${input:outputFile}",
                "--max-translations",
                "${input:maxTranslations}"
            ],
            "presentation": {
                "reveal": "always",
                "panel": "new"
            },
            "group": "build"
        },
        {
            "label": "Insert Translations",
            "type": "shell",
            "command": "${command:python.interpreterPath}",
            "args": [
                "insert_missing_translations.py",
                "--lang-code",
                "${input:languageCode}",
                "--input-file",
                "${input:inputFile}",
                "--output-file",
                "${input:poOutputFile}"
            ],
            "presentation": {
                "reveal": "always",
                "panel": "new"
            },
            "group": "build"
        },
        {
            "label": "Pytest (coverage MD)",
            "type": "shell",
            "command": "${command:python.interpreterPath}",
            "args": [
                "-m",
                "pytest",
                "--cov=ardupilot_methodic_configurator",
                "--cov-report=xml:tests/coverage.xml",
                "--md=tests/results.md"
            ],
            "group": {
                "kind": "test",
                "isDefault": true
            },
            "problemMatcher": {
                "owner": "python",
                "fileLocation": ["relative", "${workspaceFolder}"],
                "pattern": [
                    {
                        "regexp": "^(.+):(\\d+): (\\w+): (.+)$",
                        "file": 1,
                        "line": 2,
                        "severity": 3,
                        "message": 4
                    },
                    {
                        "regexp": "^(.+):(\\d+): in (.+)$",
                        "file": 1,
                        "line": 2,
                        "code": 3
                    },
                    {
                        "regexp": "^E\\s+(.+)$",
                        "message": 1
                    }
                ]
            }
        },
        {
            "label": "Coverage: run tests",
            "type": "shell",
            "command": "${command:python.interpreterPath}",
            "args": ["-m", "coverage", "run", "-m", "pytest"],
            "problemMatcher": {
                "owner": "python",
                "fileLocation": ["relative", "${workspaceFolder}"],
                "pattern": [
                    {
                        "regexp": "^(.+):(\\d+): (\\w+): (.+)$",
                        "file": 1,
                        "line": 2,
                        "severity": 3,
                        "message": 4
                    }
                ]
            }
        },
        {
            "label": "Coverage: build HTML",
            "type": "shell",
            "command": "${command:python.interpreterPath}",
            "args": ["-m", "coverage", "html"],
            "problemMatcher": []
        },
        {
            "label": "Open coverage report",
            "type": "shell",
            "command": "sh",
            "args": ["-c", "(command -v xdg-open >/dev/null && xdg-open htmlcov/index.html) || (command -v open >/dev/null && open htmlcov/index.html) || (command -v firefox >/dev/null && firefox htmlcov/index.html) || echo 'Open htmlcov/index.html manually'"],
            "windows": {
                "command": "powershell",
                "args": ["-Command", "Start-Process firefox -ArgumentList 'htmlcov/index.html' -ErrorAction SilentlyContinue; if (-Not $?) { Start-Process 'htmlcov/index.html' }"]
            },
            "problemMatcher": []
        },
        {
            "label": "Pytest (coverage HTML)",
            "dependsOn": [
                "Coverage: run tests",
                "Coverage: build HTML",
                "Open coverage report"
            ],
            "dependsOrder": "sequence",
            "group": {
                "kind": "test",
                "isDefault": false
            }
        }
    ],
    "inputs": [
        {
            "id": "languageCode",
            "type": "pickString",
            "description": "Select language code:",
            "options": ["all", "zh_CN", "pt", "de", "it", "ja"],
            "default": "all"
        },
        {
            "id": "outputFile",
            "type": "promptString",
            "description": "Enter output file base name:",
            "default": "missing_translations"
        },
        {
            "id": "maxTranslations",
            "type": "promptString",
            "description": "Enter maximum translations per file:",
            "default": "80"
        },
        {
            "id": "inputFile",
            "type": "promptString",
            "description": "Enter input file base name:",
            "default": "missing_translations"
        },
        {
            "id": "poOutputFile",
            "type": "promptString",
            "description": "Enter output .po file name:",
            "default": "ardupilot_methodic_configurator.po"
        }
    ]
}
