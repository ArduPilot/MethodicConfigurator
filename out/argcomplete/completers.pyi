import argparse
from _typeshed import Incomplete
from collections.abc import Generator

class BaseCompleter:
    def __call__(self, *, prefix: str, action: argparse.Action, parser: argparse.ArgumentParser, parsed_args: argparse.Namespace) -> None: ...

class ChoicesCompleter(BaseCompleter):
    choices: Incomplete
    def __init__(self, choices) -> None: ...
    def __call__(self, **kwargs): ...

EnvironCompleter: Incomplete

class FilesCompleter(BaseCompleter):
    allowednames: Incomplete
    directories: Incomplete
    def __init__(self, allowednames=(), directories: bool = True) -> None: ...
    def __call__(self, prefix, **kwargs): ...

class _FilteredFilesCompleter(BaseCompleter):
    predicate: Incomplete
    def __init__(self, predicate) -> None: ...
    def __call__(self, prefix, **kwargs) -> Generator[Incomplete]: ...

class DirectoriesCompleter(_FilteredFilesCompleter):
    def __init__(self) -> None: ...

class SuppressCompleter(BaseCompleter):
    def __init__(self) -> None: ...
    def suppress(self): ...
