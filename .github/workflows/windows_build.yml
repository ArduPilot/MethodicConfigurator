name: Windows Installer

on:
  release:
     types: [published]
  workflow_dispatch:
  push:
    paths:
      - '**/*.py'        # Watch for changes in any Python files

concurrency:
  group: ci-${{github.workflow}}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  windows_installer:
    runs-on: 'windows-latest'
    strategy:
      matrix:
        python-version: ['3.13']

    permissions:
      contents: write
      id-token: write    # Needed for keyless signing
      actions: read      # Needed for provenance generation
      packages: write    # Add this permission for attestations
      attestations: write # Add permissions for attestations

    steps:
      # step-security/harden-runner does not (yet) run on windows, so do not use it

      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      # https://docs.astral.sh/uv/guides/integration/github/
      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@b75a909f75acd358c2196fb9a5f1299a9a8868a4 # v6.7.0
        with:
            python-version: ${{ matrix.python-version }}
            activate-environment: true

      - name: Install dependencies
        run: |
          uv pip install .[win_dist]

      - name: Download Inno Setup installer
        run: curl -L -o installer.exe http://files.jrsoftware.org/is/6/innosetup-6.4.3.exe

      - name: Install Inno Setup
        run: ./installer.exe /verysilent /allusers /dir=inst

      - name: List installed software versions
        run: |
          python -m pip list

      - name: Prepare installer
        run: |
          cd ardupilot_methodic_configurator
          copy ..\\windows\\ardupilot_methodic_configurator.spec
          pyinstaller --clean ardupilot_methodic_configurator.spec
          del ardupilot_methodic_configurator.spec

      - name: Write the git commit hash to file
        run: |
          $hash = git rev-parse HEAD
          $hash = $hash.Trim()
          $utf8NoBom = New-Object System.Text.UTF8Encoding $false
          [System.IO.File]::WriteAllText("git_hash.txt", $hash, $utf8NoBom)

      - name: Verify git hash file
        run: |
          Write-Host "Git hash file content:"
          $bytes = [System.IO.File]::ReadAllBytes("git_hash.txt")
          if ($bytes.Length -ge 3 -and $bytes[0] -eq 0xEF -and $bytes[1] -eq 0xBB -and $bytes[2] -eq 0xBF) {
            Write-Host "::warning::File contains UTF-8 BOM"
          } else {
            Write-Host "File has no BOM (good)"
          }
          Get-Content -Raw git_hash.txt

      - name: Debug GitHub token and permissions
        run: |
          Write-Host "Checking GitHub token and permissions"
          # Don't print the actual token, just check if it exists
          if ([string]::IsNullOrEmpty("${{ secrets.GITHUB_TOKEN }}")) {
            Write-Host "::warning::GITHUB_TOKEN is empty or not accessible"
          } else {
            Write-Host "GITHUB_TOKEN is available"
          }

          # Check if running in fork (which may have limited permissions)
          if ("${{ github.repository }}" -ne "${{ github.repository_owner }}/${{ github.event.repository.name }}") {
            Write-Host "::warning::Running in a fork which may have limited permissions"
          }

      - name: Build installer
        run: |
          cd windows
          $env:VERSION=$(python return_version.py)
          curl -L -o "c:\program files (x86)\inno setup 6\Languages\ChineseSimplified.isl" https://raw.githubusercontent.com/jrsoftware/issrc/refs/heads/main/Files/Languages/Unofficial/ChineseSimplified.isl
          ISCC.exe /dMyAppVersion=$env:VERSION ardupilot_methodic_configurator.iss
          ls Output

      - name: Generate GitHub Actions build provenance
        id: gh_provenance_step # Added id
        uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a # v3.0.0
        with:
          subject-path: windows/Output/*.exe
          subject-name: 'ardupilot_methodic_configurator'
          push-to-registry: false
          # Use the built-in token instead of secrets
          github-token: ${{ github.token }}
          show-summary: true

      - name: Install Cosign
        uses: sigstore/cosign-installer@d7543c93d881b35a8faa02e8e3605f69b7a1ce62

      - name: Generate hashes
        id: hash
        run: |
          cd windows/Output
          $files = Get-ChildItem -Filter *.exe | ForEach-Object { $_.Name }
          $hashes = $files | ForEach-Object {
            $hash = (Get-FileHash -Algorithm SHA256 $_).Hash
            $encoded = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes("$($hash)  $_"))
            $encoded
          }
          $hashesJoined = $hashes -join ','
          "hashes=$hashesJoined" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Store Executable Path
        id: exe_path
        run: |
          cd windows/Output
          $exePath = Get-ChildItem -Filter *.exe | Select-Object -First 1 -ExpandProperty FullName
          "exe_path=$exePath" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Archive build
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
           name: ardupilot_methodic_configurator_setup
           path: windows/Output
           retention-days: 7

      - name: Pre Release
        uses: softprops/action-gh-release@6cbd405e2c4e67a21c47fa9e383d020e4e28b836 # v2.3.3
        if: github.ref == 'refs/heads/master'
        with:
          tag_name: "latest"
          prerelease: true
          name: "Development Build"
          files: windows/Output/*.*
          generate_release_notes: true
          token: ${{ secrets.GITHUB_TOKEN }}
          append_body: false

      - name: Release
        uses: softprops/action-gh-release@6cbd405e2c4e67a21c47fa9e383d020e4e28b836 # v2.3.3
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          prerelease: false
          files: windows/Output/*.*
          generate_release_notes: true
          token: ${{ secrets.GITHUB_TOKEN }}
          make_latest: true
