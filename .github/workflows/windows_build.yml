name: Windows Installer

on:
  release:
     types: [published]
  workflow_dispatch:
  push:
    paths:
      - '**/*.py'        # Watch for changes in any Python files

concurrency:
  group: ci-${{github.workflow}}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  windows_installer:
    runs-on: 'windows-latest'
    strategy:
      matrix:
        python-version: ['3.12']

    permissions:
      contents: write
      id-token: write  # Needed for keyless signing
      actions: read    # Needed for provenance generation

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install -U wheel pip
          python -m pip install -U pywin32
          python -m pip install -U pyinstaller packaging

      - name: Download Inno Setup installer
        run: curl -L -o installer.exe http://files.jrsoftware.org/is/6/innosetup-6.3.3.exe

      - name: Install Inno Setup
        run: ./installer.exe /verysilent /allusers /dir=inst

      - name: Build ardupilot_methodic_configurator
        run: |
          python -m pip install . --user
          python -m pip list

      - name: Prepare installer
        run: |
          cd ardupilot_methodic_configurator
          copy ..\\windows\\ardupilot_methodic_configurator.spec
          pyinstaller --clean ardupilot_methodic_configurator.spec
          del ardupilot_methodic_configurator.spec

      - name: Write the git commit hash to file
        run: |
          $hash = git rev-parse HEAD
          $hash = $hash.Trim()
          $utf8NoBom = New-Object System.Text.UTF8Encoding $false
          [System.IO.File]::WriteAllText("git_hash.txt", $hash, $utf8NoBom)

      - name: Verify git hash file
        run: |
          Write-Host "Git hash file content:"
          $bytes = [System.IO.File]::ReadAllBytes("git_hash.txt")
          if ($bytes.Length -ge 3 -and $bytes[0] -eq 0xEF -and $bytes[1] -eq 0xBB -and $bytes[2] -eq 0xBF) {
            Write-Host "::warning::File contains UTF-8 BOM"
          } else {
            Write-Host "File has no BOM (good)"
          }
          Get-Content -Raw git_hash.txt

      - name: Build installer
        run: |
          cd windows
          $env:VERSION=$(python return_version.py)
          curl -L -o "c:\program files (x86)\inno setup 6\Languages\ChineseSimplified.isl" https://raw.githubusercontent.com/jrsoftware/issrc/refs/heads/main/Files/Languages/Unofficial/ChineseSimplified.isl
          ISCC.exe /dMyAppVersion=$env:VERSION ardupilot_methodic_configurator.iss
          ls Output

      - name: Install Cosign
        uses: sigstore/cosign-installer@d7d6bc7722e3daa8354c50bcb52f4837da5e9b6a

      - name: Generate hashes
        id: hash
        run: |
          cd windows/Output
          $files = Get-ChildItem -Filter *.exe | ForEach-Object { $_.Name }
          $hashes = $files | ForEach-Object {
            $hash = (Get-FileHash -Algorithm SHA256 $_).Hash
            $encoded = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes("$($hash)  $_"))
            $encoded
          }
          echo "hashes=$(($hashes -join ','))" >> $env:GITHUB_OUTPUT

      - name: Store Executable Path
        id: exe_path
        run: |
          cd windows/Output
          $exePath = Get-ChildItem -Filter *.exe | Select-Object -First 1 -ExpandProperty FullName
          echo "exe_path=$exePath" >> $env:GITHUB_OUTPUT

      - name: Install SLSA Verifier
        run: |
          $version = "v2.5.1"
          $url = "https://github.com/slsa-framework/slsa-verifier/releases/download/$version/slsa-verifier-windows-amd64.exe"
          Invoke-WebRequest -Uri $url -OutFile slsa-verifier.exe

      - name: Generate SLSA provenance
        uses: slsa-framework/slsa-github-generator/actions/generator/generic/create-base64-subjects-from-file@f7dd8c54c2067bafc12ca7a55595d5ee9b75204a # v2.1.0
        with:
          path: ${{ steps.exe_path.outputs.exe_path }}

      - name: Debug SLSA provenance files
        run: |
          Write-Host "Looking for provenance files..."
          $files = Get-ChildItem -Path ".", "..", "../.." -Recurse -Filter "*.intoto.jsonl" -ErrorAction SilentlyContinue | Select-Object -ExpandProperty FullName
          Write-Host "Found provenance files:"
          $files | ForEach-Object { Write-Host $_ }

      - name: Verify SLSA Provenance
        continue-on-error: true
        run: |
          # Find the provenance file correctly
          $provenance = Get-ChildItem -Path "." -Filter "*.intoto.jsonl" -ErrorAction SilentlyContinue | Select-Object -First 1 -ExpandProperty FullName
          if (-not $provenance) {
            # Try a broader search but exclude test files
            $provenance = Get-ChildItem -Path ".", "..", "../.." -Recurse -Filter "*.intoto.jsonl" -ErrorAction SilentlyContinue |
              Where-Object { $_.FullName -notlike "*\testdata\*" -and $_.FullName -notlike "*\test\*" } |
              Select-Object -First 1 -ExpandProperty FullName
          }
          if (-not $provenance) {
            Write-Host "::warning::SLSA provenance file not found, skipping verification"
            exit 0  # Don't fail the build, but warn about it
          }

          Write-Host "Found provenance file at: $provenance"

          # Verify provenance for each executable
          cd windows/Output
          Get-ChildItem -Filter *.exe | ForEach-Object {
            Write-Host "Verifying SLSA provenance for $_..."
            & "../../slsa-verifier.exe" verify-artifact $_.FullName `
              --provenance-path "$provenance" `
              --source-uri "github.com/${{ github.repository }}" `
              --builder-id "https://github.com/slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@refs/heads/main"

            if ($LASTEXITCODE -ne 0) {
              Write-Host "::warning::SLSA verification failed for $_, but continuing"
            } else {
              Write-Host "✅ SLSA provenance verified for $_"
            }
          }

      - name: Sign artifacts
        run: |
          cd windows/Output
          # Sign each installer file with bundle output
          Get-ChildItem -Filter *.exe | ForEach-Object {
            cosign sign-blob --yes --output-signature "$($_.Name).sig" --bundle "$($_.Name).bundle" $_.Name
          }

      - name: Verify signatures
        continue-on-error: true
        run: |
          cd windows/Output
          # Verify each signature
          $verificationSuccess = $true
          Get-ChildItem -Filter *.exe | ForEach-Object {
            Write-Host "Verifying signature for $_..."

            # Check if bundle exists and use it
            if (Test-Path "$($_.Name).bundle") {
              Write-Host "Using bundle verification"
              cosign verify-blob --signature "$($_.Name).sig" --bundle "$($_.Name).bundle" $_.Name `
                --certificate-identity-regexp "https://github.com/${{ github.repository }}/.+" `
                --certificate-oidc-issuer "https://token.actions.githubusercontent.com"

              if ($LASTEXITCODE -eq 0) {
                Write-Host "✅ Signature verified for $_ using bundle"
              } else {
                Write-Host "❌ Bundle verification failed for $_"
                $verificationSuccess = $false
              }
            } else {
              Write-Host "Bundle not found, using keyless verification"
              cosign verify-blob --signature "$($_.Name).sig" $_.Name `
                --certificate-identity-regexp "https://github.com/${{ github.repository }}/.+" `
                --certificate-oidc-issuer "https://token.actions.githubusercontent.com"

              if ($LASTEXITCODE -ne 0) {
                Write-Host "❌ Signature verification failed for $_"
                $verificationSuccess = $false
              } else {
                Write-Host "✅ Signature verified for $_"
              }
            }
          }
          if (-not $verificationSuccess) {
            Write-Host "::error::Signature verification failed for one or more artifacts"
            exit 1
          }

      - name: Upload signatures
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: signatures
          path: |
            windows/Output/*.sig
            *.intoto.jsonl
          retention-days: 7

      - name: Archive build
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
           name: ardupilot_methodic_configurator_setup
           path: windows/Output
           retention-days: 7

      - name: Pre Release
        uses: "rearrangement/auto-releases@e0660c0d60165d4902ebdb4fdcc3c029e94f7215" # v1.1
        if: github.ref == 'refs/heads/master'
        with:
          automatic_release_tag: "latest"
          prerelease: true
          title: "Development Build"
          files: windows/Output/*.*
          repo_token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Release
        uses: "rearrangement/auto-releases@e0660c0d60165d4902ebdb4fdcc3c029e94f7215" # v1.1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          prerelease: false
          files: windows/Output/*.*
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
