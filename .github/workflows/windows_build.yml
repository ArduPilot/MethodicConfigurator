name: Windows Installer

on:
  release:
    types: [published]
  workflow_dispatch:
  push:
    paths:
      - '**/*.py'  # Watch for changes in any Python files

concurrency:
  group: ci-${{github.workflow}}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build:
    runs-on: 'windows-latest'
    strategy:
      matrix:
        python-version: ['3.13']

    outputs:
      hashes: ${{ steps.hash.outputs.hashes }}

    permissions:
      contents: write
      id-token: write

    steps:
      # step-security/harden-runner does not (yet) run on windows, so do not use it

      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      # https://docs.astral.sh/uv/guides/integration/github/
      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@b75a909f75acd358c2196fb9a5f1299a9a8868a4 # v6.7.0
        with:
          python-version: ${{ matrix.python-version }}
          activate-environment: true

      - name: Install dependencies
        run: |
          uv pip install .[win_dist]

      - name: Download Inno Setup installer
        run: curl -L -o installer.exe http://files.jrsoftware.org/is/6/innosetup-6.4.3.exe

      - name: Install Inno Setup
        run: ./installer.exe /verysilent /allusers /dir=inst

      - name: List installed software versions
        run: |
          python -m pip list

      - name: Prepare installer
        run: |
          cd ardupilot_methodic_configurator
          copy ..\\windows\\ardupilot_methodic_configurator.spec
          pyinstaller --clean ardupilot_methodic_configurator.spec
          del ardupilot_methodic_configurator.spec

      - name: Write the git commit hash to file
        run: |
          $hash = git rev-parse HEAD
          $hash = $hash.Trim()
          $utf8NoBom = New-Object System.Text.UTF8Encoding $false
          [System.IO.File]::WriteAllText("git_hash.txt", $hash, $utf8NoBom)

      - name: Verify git hash file
        run: |
          Write-Host "Git hash file content:"
          $bytes = [System.IO.File]::ReadAllBytes("git_hash.txt")
          if ($bytes.Length -ge 3 -and $bytes[0] -eq 0xEF -and $bytes[1] -eq 0xBB -and $bytes[2] -eq 0xBF) {
            Write-Host "::warning::File contains UTF-8 BOM"
          } else {
            Write-Host "File has no BOM (good)"
          }
          Get-Content -Raw git_hash.txt

      - name: Debug GitHub token and permissions
        run: |
          Write-Host "Checking GitHub token and permissions"
          # Don't print the actual token, just check if it exists
          if ([string]::IsNullOrEmpty("${{ secrets.GITHUB_TOKEN }}")) {
            Write-Host "::warning::GITHUB_TOKEN is empty or not accessible"
          } else {
            Write-Host "GITHUB_TOKEN is available"
          }

          # Check if running in fork (which may have limited permissions)
          if ("${{ github.repository }}" -ne "${{ github.repository_owner }}/${{ github.event.repository.name }}") {
            Write-Host "::warning::Running in a fork which may have limited permissions"
          }

      - name: Build installer
        run: |
          cd windows
          $env:VERSION=$(python return_version.py)
          curl -L -o "c:\program files (x86)\inno setup 6\Languages\ChineseSimplified.isl" https://raw.githubusercontent.com/jrsoftware/issrc/refs/heads/main/Files/Languages/Unofficial/ChineseSimplified.isl
          ISCC.exe /dMyAppVersion=$env:VERSION ardupilot_methodic_configurator.iss
          ls Output

      # https://github.com/slsa-framework/slsa-github-generator/blob/main/internal/builders/generic/README.md
      - name: Generate hashes
        id: hash
        shell: bash
        run: |
          cd windows/Output
          # Generate SHA256 hashes in the format expected by SLSA (sha256sum format)
          sha256sum *.exe > checksums.txt
          echo "hashes=$(cat checksums.txt | base64 -w0)" >> "$GITHUB_OUTPUT"

      - name: Upload build artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: windows-installer
          path: windows/Output/*.exe
          retention-days: 7

  # Generate SLSA provenance using the official generic workflow
#  provenance:
#    needs: [build]
#    permissions:
#      actions: read    # To read the workflow path
#      id-token: write  # To sign the provenance
#      contents: write  # To add assets to a release
#    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@4876e96b8268fd8b7b8d8574718d06c0d0426d40 # latest commit
#    with:
#      base64-subjects: "${{ needs.build.outputs.hashes }}"
#      upload-assets: ${{ startsWith(github.ref, 'refs/tags/v') }}  # Only upload to releases for v* tags
#      continue-on-error: false  # Explicit error handling - fail fast for security issues

  # Release job that depends on provenance generation
  release:
#    needs: [build, provenance]
    needs: [build]
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
    permissions:
      contents: write

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: windows-installer
          path: release-artifacts

      - name: Pre Release
        uses: softprops/action-gh-release@6cbd405e2c4e67a21c47fa9e383d020e4e28b836 # v2.3.3
        if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        with:
          tag_name: "latest"
          prerelease: true
          name: "Development Build"
          files: release-artifacts/*
          generate_release_notes: true
          token: ${{ secrets.GITHUB_TOKEN }}
          append_body: false

      - name: Release
        uses: softprops/action-gh-release@6cbd405e2c4e67a21c47fa9e383d020e4e28b836 # v2.3.3
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          prerelease: false
          files: release-artifacts/*
          generate_release_notes: true
          token: ${{ secrets.GITHUB_TOKEN }}
          make_latest: true
