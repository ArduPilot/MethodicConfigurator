name: Version Bump and Tag

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'New version number (X.Y.Z format)'
        required: true
        type: string
      tag_message:
        description: 'Tag message'
        required: true
        type: string

permissions:
  contents: read

jobs:
  bump-version:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    permissions:
      contents: write # to trigger the windows_build and python-publish workflows

    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@002fdce3c6a235733a90a27c80493a3241e56863 # v2.12.1
        with:
          egress-policy: audit

      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ssh-key: "${{ secrets.VERSION_BUMP_KEY }}"  # This is a deploy key with write access, without it other workflows will not get triggered to run

      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: 3.x

      - name: Install dependencies
        id: install_deps
        continue-on-error: true
        run: |
          WARNINGS=0

          export PIP_VERSION=$(grep -oP 'pip\s*==\s*\K[0-9]+(\.[0-9]+)*' pyproject.toml || echo '')
          if [ -z "$PIP_VERSION" ]; then
            echo "::warning::Could not detect pip version in pyproject.toml; falling back to latest."
            PIP_INSTALL="pip"
            WARNINGS=1
          else
            echo "Will install pip version $PIP_VERSION."
            PIP_INSTALL="pip==$PIP_VERSION"
          fi
          python -m pip install "$PIP_INSTALL"

          export PACKAGING_VERSION=$(grep -oP 'packaging\s*==\s*\K[0-9]+(\.[0-9]+)*' pyproject.toml || echo '')
          if [ -z "$PACKAGING_VERSION" ]; then
            echo "::warning::Could not detect packaging version in pyproject.toml; falling back to latest."
            PACKAGING_INSTALL="packaging"
            WARNINGS=1
          else
            echo "Will install packaging version $PACKAGING_VERSION."
            PACKAGING_INSTALL="packaging==$PACKAGING_VERSION"
          fi
          pip install "$PACKAGING_INSTALL"

          echo "warnings=$WARNINGS" >> $GITHUB_OUTPUT
          if [ "$WARNINGS" -eq 1 ]; then
            exit 1
          fi

      - name: Validate version format
        run: |
          if ! [[ ${{ github.event.inputs.version }} =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format. Must be X.Y.Z"
            exit 1
          fi

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(grep -oP '__version__ = "\K[^"]+' ardupilot_methodic_configurator/__init__.py)
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Compare versions
        run: |
          python3 - <<EOF
          from packaging import version
          current = version.parse("${{ steps.current_version.outputs.current_version }}")
          new = version.parse("${{ github.event.inputs.version }}")
          if new <= current:
              print(f"Error: New version {new} must be greater than current version {current}")
              exit(1)
          print(f"Version increase valid: {current} -> {new}")
          EOF

      - name: Update version in __init__.py
        run: |
          sed -i 's/__version__ = ".*"/__version__ = "${{ github.event.inputs.version }}"/' ardupilot_methodic_configurator/__init__.py

      - name: Commit and push changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add ardupilot_methodic_configurator/__init__.py
          git commit -m "chore(release): Bump version info, tag and release"
          git push

      - name: Create and push tag
        run: |
          git tag -a "v${{ github.event.inputs.version }}" -m "${{ github.event.inputs.tag_message }}"
          git push origin "v${{ github.event.inputs.version }}"
