name: Pytest

# https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#packaging-workflow-data-as-artifacts

on:
  pull_request:
    paths:
      - '**/*.py'        # Watch for changes in any Python files
      - 'pyproject.yml'  # Watch for changes in the pyproject.yml file
  push:
    paths:
      - '**/*.py'        # Watch for changes in any Python files
      - 'pyproject.yml'  # Watch for changes in the pyproject.yml file
  workflow_dispatch:
  release:
    types: [published]

jobs:
  pytest:
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && !github.event.pull_request)
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # os: [ubuntu-latest, macos-latest, windows-latest]
        # python-version: ["3.9", "3.10", "3.11", "3.12", "pypy3.9", "pypy3.10"]
        os: [ubuntu-latest]
        python-version: ["3.9", "3.13"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Install apt packages
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb

      - name: Test with pytest
        id: pytest
        continue-on-error: false
        run: |
          export DISPLAY=:99
          Xvfb :99 -screen 0 1024x768x16 &
          pytest --cov=ardupilot_methodic_configurator --cov-report=xml:tests/coverage.xml --md=tests/results-${{ matrix.python-version }}.md --junit-xml=tests/results-junit.xml

      - name: Display test results as github job summary
        run: cat tests/results-${{ matrix.python-version }}.md >> $GITHUB_STEP_SUMMARY
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}

      - name: Upload coverage xml report
        uses: actions/upload-artifact@v4
        with:
            name: coverage-${{ matrix.python-version }}-xml
            path: tests/*.xml
            retention-days: 1
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
            name: coverage-${{ matrix.python-version }}
            path: .coverage
            include-hidden-files: true
            retention-days: 1
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}

  upload_coverage_to_coveralls:
    if: (github.event_name == 'push' && github.ref == 'refs/heads/master') && (success() || failure())
    runs-on: ubuntu-latest
    needs: pytest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download coverage xml report
        uses: actions/download-artifact@v4
        with:
          name: coverage-3.9-xml

      - name: Upload coverage xml report to coveralls.io
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          files: coverage.xml

      # TODO: create a badge that presents the result of the Upload coverage xml report step

  check_coverage:
    if: success() || failure()
    runs-on: ubuntu-latest
    needs: pytest  # This will ensure this job runs after 'pytest'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-3.9

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'  # Match with the coverage report Python version

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip coverage

      - name: Check coverage
        run: |
          # Check if pytest job failed
          if [ "${{ needs.pytest.result }}" == "failure" ]; then
            echo "Pytest failed - failing coverage check"
            exit 1
          fi
          coverage report --fail-under=41

  publish-test-results:
    if: always()
    name: "Publish Tests Results"
    runs-on: ubuntu-latest
    needs: pytest  # This will ensure this job runs after 'pytest'
    permissions:
      checks: write

      # only needed unless run with comment_mode: off
      pull-requests: write

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        id: test-results
        with:
          files: "artifacts/**/results-junit.xml"

      - name: Set badge color
        shell: bash
        run: |
          case ${{ fromJSON( steps.test-results.outputs.json ).conclusion }} in
            success)
              echo "BADGE_COLOR=31c653" >> $GITHUB_ENV
              ;;
            failure)
              echo "BADGE_COLOR=800000" >> $GITHUB_ENV
              ;;
            neutral)
              echo "BADGE_COLOR=696969" >> $GITHUB_ENV
              ;;
          esac

      - name: Create badge
        uses: emibcn/badge-action@808173dd03e2f30c980d03ee49e181626088eee8
        with:
          label: Tests
          status: '${{ fromJSON( steps.test-results.outputs.json ).formatted.stats.tests }} tests, ${{ fromJSON( steps.test-results.outputs.json ).formatted.stats.runs }} runs: ${{ fromJSON( steps.test-results.outputs.json ).conclusion }}'
          color: ${{ env.BADGE_COLOR }}
          path: badge.svg

      - name: Upload badge to Gist
        # Upload only for master branch
        if: >
          github.event_name == 'workflow_run' && github.event.workflow_run.head_branch == 'master' ||
          github.event_name != 'workflow_run' && github.ref == 'refs/heads/master'
        uses: andymckay/append-gist-action@6e8d64427fe47cbacf4ab6b890411f1d67c07f3e
        with:
          token: ${{ secrets.GIST_TOKEN }}
          gistURL: https://gist.githubusercontent.com/amilcarlucas/81b511dc0ff92b8072613d1cd100832e
          file: badge.svg

  add_coverage_to_pullrequest:
    if: github.event_name == 'pull_request' && (success() || failure())
    runs-on: ubuntu-latest
    needs: pytest  # This will ensure this job runs after 'pytest'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download coverage xml report
        uses: actions/download-artifact@v4
        with:
          name: coverage-3.9-xml

      - name: Get Cover
        uses: orgoro/coverage@v3.2
        with:
            coverageFile: coverage.xml
            token: ${{ secrets.GITHUB_TOKEN }}
